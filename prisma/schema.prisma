generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  predict       predict[]
  // predictions   predictions[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model platforms {
  id           Int            @id @default(autoincrement())
  platform     String
  // Collections  collection[]
  Marketplaces marketplaces[]
}

model marketplaces {
  id          Int           @id @default(autoincrement())
  platformId  Int           @map("platform_id")
  marketplace String
  address     String?
  url         String?
  floorPrices floorPrices[]
  platform    platforms     @relation(fields: [platformId], references: [id])
}

// model collection {
//   id          Int           @id @default(autoincrement())
//   createdAt   DateTime      @default(now()) @map("created_at")
//   platformId  Int           @map("platform_id")
//   address     String?
//   name        String
//   imageUrl    String?       @map("image_url")
//   slug        String        @unique
//   supply      Int?
//   twitter     String?
//   discord     String?
//   website     String?
//   platform    platforms     @relation(fields: [platformId], references: [id])
//   floorPrices floorPrices[]
//   Predictions predictions[]
// }

model predict {
  id         Int      @id @default(autoincrement())
  date       DateTime @default(now())
  slug       String
  userId     String   @map("user_id")
  direction  String
  duration   String
  threshold  Float
  startPrice Float    @map("start_price")
  endPrice   Float    @map("end_price")
  status     String
  project    project  @relation(fields: [slug], references: [slug])
  user       User     @relation(fields: [userId], references: [id])
}

model project {
  id      Int       @id @default(autoincrement())
  name    String?
  slug    String    @unique
  image   String?
  predict predict[]
  floor   floorPrices[]
}

model floorPrices {
  date          DateTime
  collectionId  Int          @map("collection_id")
  marketplaceId Int          @map("marketplace_id")
  price         Float
  symbol        String
  collection    project   @relation(fields: [collectionId], references: [id])
  marketplace   marketplaces @relation(fields: [marketplaceId], references: [id])

  @@unique([date, collectionId, marketplaceId])
}

// model predictions {
//   id           Int        @id @default(autoincrement())
//   date         DateTime   @default(now())
//   collectionId Int        @map("collection_id")
//   userId       String     @map("user_id")
//   direction    String
//   duration     String
//   threshold    Float
//   startPrice   Float      @map("start_price")
//   endPrice     Float      @map("end_price")
//   status       String
//   collection   collection @relation(fields: [collectionId], references: [id])
//   user         User       @relation(fields: [userId], references: [id])

//   @@unique([date, collectionId, userId])
// }
